// <auto-generated />
using System;
using FlomtManager.Data.EF.SQLite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlomtManager.Data.EF.SQLite.Migrations
{
    [DbContext(typeof(SQLiteAppDb))]
    partial class SQLiteAppDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("FlomtManager.Data.EF.Entities.DataGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("datetime('now', 'localtime')");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DateTime", "DeviceId")
                        .IsUnique();

                    b.ToTable("DataGroups");
                });

            modelBuilder.Entity("FlomtManager.Data.EF.Entities.DeviceDefinitionEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("AverageParameterArchiveLineDefinition")
                        .HasColumnType("BLOB");

                    b.Property<ushort>("AverageParameterArchiveLineDefinitionStart")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("AverageParameterArchiveLineLength")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("AverageParameterArchiveLineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("AveragePerHourBlockLineCount")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("AveragePerHourBlockStart")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("CRC")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("datetime('now', 'localtime')");

                    b.Property<byte[]>("CurrentParameterLineDefinition")
                        .HasColumnType("BLOB");

                    b.Property<ushort>("CurrentParameterLineDefinitionStart")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CurrentParameterLineLength")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("CurrentParameterLineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("CurrentParameterLineStart")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("DescriptionStart")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("IntegralParameterLineDefinition")
                        .HasColumnType("BLOB");

                    b.Property<ushort>("IntegralParameterLineDefinitionStart")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("IntegralParameterLineLength")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("IntegralParameterLineNumber")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("IntegralParameterLineStart")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastArchiveRead")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("ParameterDefinitionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ParameterDefinitionStart")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ProgramVersionStart")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("DeviceDefinitions");
                });

            modelBuilder.Entity("FlomtManager.Data.EF.Entities.DeviceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("BaudRate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("datetime('now', 'localtime')");

                    b.Property<int>("DataBits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceDefinitionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Parity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PortName")
                        .HasColumnType("TEXT");

                    b.Property<byte>("SlaveId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StopBits")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("FlomtManager.Data.EF.Entities.ParameterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Comma")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("datetime('now', 'localtime')");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ErrorMask")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("IntegrationNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<byte>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("FlomtManager.Data.EF.Entities.DataGroupEntity", b =>
                {
                    b.HasOne("FlomtManager.Data.EF.Entities.DeviceEntity", "Device")
                        .WithMany("DataGroups")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("FlomtManager.Data.EF.Entities.DeviceDefinitionEntity", b =>
                {
                    b.HasOne("FlomtManager.Data.EF.Entities.DeviceEntity", null)
                        .WithOne("DeviceDefinition")
                        .HasForeignKey("FlomtManager.Data.EF.Entities.DeviceDefinitionEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlomtManager.Data.EF.Entities.ParameterEntity", b =>
                {
                    b.HasOne("FlomtManager.Data.EF.Entities.DeviceEntity", "Device")
                        .WithMany("Parameters")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("FlomtManager.Data.EF.Entities.DeviceEntity", b =>
                {
                    b.Navigation("DataGroups");

                    b.Navigation("DeviceDefinition");

                    b.Navigation("Parameters");
                });
#pragma warning restore 612, 618
        }
    }
}
